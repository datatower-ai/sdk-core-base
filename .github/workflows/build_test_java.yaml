name: Java CI (4Test)

on:
  push:
    paths:
      - 'common/**'
      - 'java/**'

permissions:
  contents: read

jobs:
  build:
    name: Build ${{ matrix.settings.target }}
    runs-on: ${{ matrix.settings.host }}
    strategy:
      matrix:
        settings:
          - target: x86_64-unknown-linux-gnu
            host: ubuntu-latest
            so_name: libdt_core_java.so
            target_name: libdt_core_java-linux-amd64.so
          - target: aarch64-unknown-linux-gnu
            host: ubuntu-latest
            so_name: libdt_core_java.so
            target_name: libdt_core_java-linux-arm64.so
          - target: x86_64-apple-darwin
            host: macOS-latest
            so_name: libdt_core_java.dylib
            target_name: libdt_core_java-macos-amd64.dylib
          - target: aarch64-apple-darwin
            host: macOS-latest
            so_name: libdt_core_java.dylib
            target_name: libdt_core_java-macos-arm64.dylib
          - target: x86_64-pc-windows-msvc
            host: windows-latest
            so_name: dt_core_java.dll
            target_name: libdt_core_java-windows-amd64.dll
          - target: aarch64-pc-windows-msvc
            host: windows-latest
            so_name: dt_core_java.dll
            target_name: libdt_core_java-windows-arm64.dll
    steps:
      - uses: actions/checkout@v4
      - name: Build Library
        uses: houseabsolute/actions-rust-cross@v0
        with:
          command: build
          target: ${{ matrix.settings.target }}
          args: "--release --package java"
      - name: Get Artifacts
        run: |
          mkdir artifacts 
          mv ./target/${{ matrix.settings.target }}/release/${{ matrix.settings.so_name }} artifacts/${{ matrix.settings.target_name }}
        shell: bash
      - name: Post-built
        if: ${{ matrix.settings.post_built }}
        run: ${{ matrix.settings.post_built }}
        shell: bash
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.settings.target }}
          path: ./artifacts/${{ matrix.settings.target_name }}

  publish:
    name: Push
    needs: [ build ]
    runs-on: ubuntu-latest
    env:
      BRANCH: "test"
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true
      - name: Clone, Update, Push
        run: |
          branch=${{env.BRANCH}}
          echo "Cloning..."
          mkdir target_repo && cd target_repo
          git clone -b "$branch" https://github.com/datatower-ai/dt-java-sdk.git
          cd ../

          echo "Resetting..."
          find target_repo/dt-java-sdk/ -mindepth 1 -maxdepth 1 -type f -exec rm -f {} +
          find target_repo/dt-java-sdk/ -mindepth 1 -maxdepth 1 ! -name '.git' -type d -exec rm -rf {} +

          echo "Updating..."
          mv java/java/* target_repo/dt-java-sdk/
          find java/java/ -mindepth 1 -maxdepth 1 -type f -name '.*' -exec mv -f {} target_repo/dt-java-sdk/ \;
          find java/java/ -mindepth 1 -maxdepth 1 -type d -name '.*' ! -name "." ! -name ".." -exec mv -rf {} target_repo/dt-java-sdk/ \;
          mv target_repo/dt-java-sdk/.gitignore_sub target_repo/dt-java-sdk/.gitignore
          mkdir -p target_repo/dt-java-sdk/lib/src/main/resources/ai/datatower/sdk
          mv artifacts/* target_repo/dt-java-sdk/lib/src/main/resources/ai/datatower/sdk

          echo "Pushing..."
          version=$(grep -oE "^version = .*$" "target_repo/dt-java-sdk/lib/build.gradle" | sed -ne "s/^version = \"\(.*\)\"$/\1/p")
          cd target_repo/dt-java-sdk/
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          git config url."https://${{ secrets.SERVER_SDK_JAVA_TOKEN }}@github.com/".insteadOf "https://github.com/"
          git add .
          timestamp=$(date +%s)
          git commit -m "GitHub Action Bot: Syncing with v$version (Test, $timestamp)"
          git push -f origin "$branch"
        shell: bash
      - name: Trigger build SNAPSHOT
        if: always()
        run: |
          branch=${{env.BRANCH}}
          echo "on branch: $branch"
          PACKAGE_URL="https://jitpack.io/com/github/datatower-ai/dt-java-sdk/$branch-SNAPSHOT/"
          
          sleep 10
          
          count=1
          file_count=0
          max_try=3
          until [[ $count -gt $max_try ]] || [[ $file_count -gt 1 ]]; do
            echo "Attempt ${count}/${max_try}"
            FILES=$(curl -sS -m 30 ${PACKAGE_URL})
            file_count=$(echo $FILES | wc -w | xargs)
            let count+=1
            sleep 5
          done
          
          echo "=> ${PACKAGE_URL}build.log"
          if [[ file_count -gt 1 ]]; then
            echo "Finished!"
          else
            echo "Failed!"
          fi
        shell: bash